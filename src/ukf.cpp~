#include "ukf.h"
#include "Eigen/Dense"
#include <iostream>

using namespace std;
using Eigen::MatrixXd;
using Eigen::VectorXd;
using std::vector;

/**
 * Initializes Unscented Kalman filter
 * This is scaffolding, do not modify
 */
UKF::UKF() {
	// if this is false, laser measurements will be ignored (except during init)
	use_laser_ = true;

	// if this is false, radar measurements will be ignored (except during init)
	use_radar_ = true;

	// initial state vector
	x_ = VectorXd(5);

	// initial covariance matrix
	P_ = MatrixXd(5, 5);

	// Process noise standard deviation longitudinal acceleration in m/s^2
	std_a_ = 10;

	// Process noise standard deviation yaw acceleration in rad/s^2
	std_yawdd_ = M_PI / 6;

	//DO NOT MODIFY measurement noise values below these are provided by the sensor manufacturer.
	// Laser measurement noise standard deviation position1 in m
	std_laspx_ = 0.15;

	// Laser measurement noise standard deviation position2 in m
	std_laspy_ = 0.15;

	// Radar measurement noise standard deviation radius in m
	std_radr_ = 0.3;

	// Radar measurement noise standard deviation angle in rad
	std_radphi_ = 0.03;

	// Radar measurement noise standard deviation radius change in m/s
	std_radrd_ = 0.3;
	//DO NOT MODIFY measurement noise values above these are provided by the sensor manufacturer.

	/**
	TODO: Complete the initialization. See ukf.h for other member properties.	Hint: one or more values initialized above might be wildly off...
	*/
	/// State dimension
	n_x_ = 5;

	/// Augmented state dimension
	n_aug_ = n_x_ + 2;

	/// Sigme point spreading parameter
	lambda_ = 3 - n_aug_;

	/// initialize weights
	weights_ = VectorXd(2 * n_aug_ + 1);
	weights_I = MatrixXd(2 * n_aug_ + 1, 2 * n_aug_ + 1);
	weights_(0) = lambda_ / (lambda_ + n_aug_);
	weights_I(0,0) = weights_(0);
	for (int i = 1; i < 2 * n_aug_ + 1; i++){
		weights_(i) = 0.5 / (lambda_ + n_aug_);
		weights_I(i,i) = weights_(i);
	}
	
	/// Predicted sigma points initialization 
	Xsig_pred_ = MatrixXd(n_x_, 2 * n_aug_ + 1); 
}

UKF::~UKF() {}

/**
 * @param {MeasurementPackage} meas_package The latest measurement data of
 * either radar or laser.
 */
void UKF::ProcessMeasurement(MeasurementPackage meas_package) {
	/**
	 * TODO:
	 * Complete this function! Make sure you switch between 
	 * lidar and radar measurements.
	 */
}

/**
 * AugmentedSigmaPoints returns augmented sigma points
 * @param Xsig_out a pointer for result augmented sigma points
 */
void UKF::AugmentedSigmaPoints(MatrixXd* Xsig_out)
{
	//create augmented mean vector
	VectorXd x_aug = VectorXd(n_aug_);

	//create augmented state covariance
	MatrixXd P_aug = MatrixXd(n_aug_, n_aug_);

	//create augmented sigma points
	MatrixXd Xsig_aug = MatrixXd(n_aug_, 2 * n_aug_ + 1);

	//create augmented mean state
	x_aug.head(n_x_) = x_;
	for (int i = n_x_; i < n_aug_; i++)
		x_aug(i) = 0;

	//create augmented covariance matrix
	P_aug.topLeftCorner(n_x_,n_x_) = P_;
	// for (int i = n_x_; i < n_aug_; i++)
	//	P_aug(i,i) = std_(i - n_x_) * std_(i - n_x_);
	P_aug(5,5) = std_a_ * std_a_;
	P_aug(6,6) = std_yawdd_ * std_yawdd_;

	//create square root matrix
	MatrixXd A = P_aug.llt().matrixL();

	//create augmented sigma points
	Xsig_aug.col(0)  = x_aug;
	double scale_fact = sqrt(lambda_ + n_aug);
	for (int i = 0; i < n_aug; i++)
	{
		Xsig_aug.col(i+1)     	= x_aug + scale_fact * A.col(i);
		Xsig_aug.col(i+1+n_aug) = x_aug - scale_fact * A.col(i);
	}
	*Xsig_out = Xsig_aug;
}


/**
 * SigmaPointsPrediction assigns predicted sigma points
 * @param delta_t Time between k and k+1 in s
 * @param Xsig_aug augmented sigma points 
 * @param Xsig_out a pointer for result predicted sigma points
 */
void UKF::SigmaPointsPrediction(double detla_t, MatrixXd Xsig_aug, MatrixXd* Xsig_out) {

	MatrixXd Xsig_pred = MatrixXd(n_x_, 2 * n_aug_ + 1);
	double dt = delta_t;
	double dt2 = dt * dt / 2;

	for (int i = 0; i < 2 * n_aug + 1; i++)
	{
		// reading necessary data
		VectorXd state_aug = Xsig_aug.col(i);
		double v   = state_aug(2);
		double phi = state_aug(3);
		double phid = state_aug(4);
		double nu_a = state_aug(5);
		double nu_yawdd = state_aug(6);

		double cos_phi = cos(phi);
		double sin_phi = sin(phi);
		// error term
		VectorXd x_err = VectorXd(5);
		x_err << dt2*cos_phi*nu_a, dt2*sin_phi*nu_a, dt * nu_a, dt2 * nu_yawdd, dt * nu_yawdd;

		if (fabs(phid) > 0.00001)
		{
			Xsig_pred.col(i) << v/phid*(sin(phi + phid*dt) - sin_phi), 
				v/phid*(cos_phi - cos(phi + phid*dt)), 
				0,
				phid * dt,
				0;
		}
		else
		{
			Xsig_pred.col(i) << v*cos_phi*dt, v*sin_phi*dt, 0, 0, 0;
		}
		Xsig_pred.col(i) += Xsig_aug.col(i).head(5) + x_err;
	}
	*Xsig_out = Xsig_pred;
}

/**
 * Predicts sigma points, the state, and the state covariance matrix.
 * @param {double} delta_t the change in time (in seconds) between the last
 * measurement and this one.
 */
void UKF::Prediction(double delta_t) {
	/**
	 * TODO:
	 * Complete this function! Estimate the object's location. Modify the state
	 * vector, x_. Predict sigma points, the state, and the state covariance matrix.
	 */
	MatrixXd Xsig_aug = MatrixXd(n_aug_, 2 * n_aug_ + 1);
	AugmentedSigmaPoints(&Xsig_aug);
	SigmaPointsPrediction(delta_t, Xsig_aug, &Xsig_pred_);
	
	//create vector for predicted state
	x_ = Xsig_pred_ * weights_;

	//create covariance matrix for prediction
	MatrixXd X_err = Xsig_pred_.colwise() - x_;

	for (int i = 0; i < 2 * n_aug_ + 1; i++)
		if (X_err(2,i) >= M_PI) X_err(2,i) -= 2*M_PI;
		else if(X_err(2,i) <= -M_PI) X_err(2,i) += 2*M_PI;

	P = X_err * weights_I * X_err.transpose();
}

/**
 * Updates the state and the state covariance matrix using a laser measurement.
 * @param {MeasurementPackage} meas_package
 */
void UKF::UpdateLidar(MeasurementPackage meas_package) {
	/**
	 * TODO:
	 * Complete this function! Use lidar data to update the belief about the object's
	 * position. Modify the state vector, x_, and covariance, P_.
	 * You'll also need to calculate the lidar NIS.
	 */
}

/**
 * PredictRadarMeasurement predicts radar measurement
 * @param z_out pointer for predicted radar state
 * @param Z_out pointer for sigma points in radar space
 * @param Z_err_out pointer for error matrix in radar space
 * @param S_out pointer for measurement covariance matrix 
 */
void UKF::PredictRadarMeasurement(VectorXd* z_out, MatrixXd* Z_out, MatrixXd* Z_err_out, MatrixXd* S_out){
	int n_z = 3;
	//create matrix for sigma points in measurement space
	MatrixXd Z_sig = MatrixXd(n_z, 2 * n_aug_ + 1);

	//mean predicted measurement
	VectorXd z_pred = VectorXd(n_z);

	//measurement covariance matrix S
	MatrixXd S = MatrixXd(n_z, n_z);

	for (int i = 0; i < 2 * n_aug_ + 1; i++)
	{
		double px = Xsig_pred_(0,i);
		double py = Xsig_pred_(1,i);
		double v  = Xsig_pred_(2,i);
		double yaw = Xsig_pred_(3,i);
		// polar coordinates (radar) state vector
		Z_sig(0,i) = sqrt(px*px + py*py);
		Z_sig(1,i) = atan2(py,px);
		Z_sig(2,i) = (px*cos(yaw) + py*sin(yaw))*v / Z_sig(0,i);
	}

	z_pred = Z_sig * weights_;

	//create covariance matrix for prediction
	MatrixXd Z_err = Z_sig.colwise() - z_pred;

	for (int i = 0; i < 2 * n_aug_ + 1; i++)
		if (Z_err(1,i) >= M_PI) Z_err(1,i) -= 2*M_PI;
		else if(Z_err(1,i) <= -M_PI) Z_err(1,i) += 2*M_PI;

	S = Z_err * weights_I * Z_err.transpose();

	//add measurement noise covariance matrix
	MatrixXd R = MatrixXd(n_z, n_z);
	R <<    std_radr_ * std_radr_, 0, 0,
	  	0, std_radphi_ * std_radphi_, 0,
	  	0, 0, std_radrd_ * std_radrd_;
	S = S + R;	

	*z_out = z_pred;
	*Z_out = Z_sig;
	*Z_err_out = Z_err;
	*S_out = S;
}


/**
 * Updates the state and the state covariance matrix using a radar measurement.
 * @param {MeasurementPackage} meas_package
 */
void UKF::UpdateRadar(MeasurementPackage meas_package) {
	/**
	 * TODO:
	 * Complete this function! Use radar data to update the belief about the object's
	 * position. Modify the state vector, x_, and covariance, P_.
	 * You'll also need to calculate the radar NIS.
	 */
}
